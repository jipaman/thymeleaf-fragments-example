{
  "name": "Thymeleaf-fragments-example",
  "tagline": "Using Thymeleaf 3 with fragments",
  "body": "# Thymeleaf Fragments Example\r\n[![Build Status](https://travis-ci.org/juliuskrah/thymeleaf-fragments-example.svg?branch=master)](https://travis-ci.org/juliuskrah/thymeleaf-fragments-example)\r\n\r\nThis is to illustrate layouts example in thymeleaf using the Thymeleaf Standard Layout System. For more\r\ninformation on using the standard template check out [this][layouts-blog] article.\r\n\r\nThe template used in this example was downloaded from [Start Boostrap][sb-admin 2].\r\n\r\nThis example uses [Thymeleaf 3.0.0.RELEASE][Thymeleaf 3 announcement] to render the templates.\r\n\r\nSome minor configuration changes are required to use Thymeleaf 3 with [Spring 4][Spring Framework].\r\n\r\n## Pre-requisites\r\n- Maven 3.3+\r\n- Java 8+\r\n- Jetty 9+ or Tomcat 8+ (Optional)\r\n- Spring Framework 4.2.x\r\n- Thymeleaf 3.0.x\r\n\r\n## Configuration\r\nThe fist thing required is to declare your depencies in your `pom.xml`\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.thymeleaf</groupId>\r\n  <artifactId>thymeleaf</artifactId>\r\n  <version>3.0.0.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n  <groupId>org.thymeleaf</groupId>\r\n  <artifactId>thymeleaf-spring4</artifactId>\r\n  <version>3.0.0.RELEASE</version>\r\n</dependency>\r\n```\r\n\r\nThe second thing to do is your spring configuration\r\n\r\n```java\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan(basePackageClasses = { Controllers.class })\r\npublic class WebAppConfig extends WebMvcConfigurerAdapter implements ApplicationContextAware {\r\n\tprivate ApplicationContext applicationContext;\r\n\r\n\tprivate static final String VIEWS = \"classpath:templates/\";\r\n\t...\r\n\t\r\n\t@Bean\r\n\tpublic ViewResolver viewResolver() {\r\n\t\tThymeleafViewResolver resolver = new ThymeleafViewResolver();\r\n\t\tresolver.setTemplateEngine(templateEngine());\r\n\t\tresolver.setCharacterEncoding(\"UTF-8\");\r\n\t\treturn resolver;\r\n\t}\r\n\r\n\tprivate TemplateEngine templateEngine() {\r\n\t\tSpringTemplateEngine engine = new SpringTemplateEngine();\r\n\t\tengine.setTemplateResolver(templateResolver());\r\n\t\treturn engine;\r\n\t}\r\n\r\n\tprivate ITemplateResolver templateResolver() {\r\n\t\tSpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\r\n\t\tresolver.setApplicationContext(applicationContext);\r\n\t\tresolver.setPrefix(VIEWS);\r\n\t\tresolver.setSuffix(\".html\");\r\n\t\tresolver.setTemplateMode(TemplateMode.HTML);\r\n\t\treturn resolver;\r\n\t}\r\n}\r\n```\r\n\r\nThe first difference with the Thymeleaf 3 configuration is that now the recommended template resolver for Spring applications is \r\n`SpringResourceTemplateResolver`. It needs a reference to the Spring `ApplicationContext` so the configuration bean has to implement \r\nthe `ApplicationContextAware` interface.\r\n\r\nThe second difference is that the template mode has a value of `TemplateMode.HTML`. Template modes are not strings anymore and the \r\npossible values are a bit different from Thymeleaf 2.\r\n\r\n## Running the Application\r\nYour can run the application by specifying a maven goal `mvn jetty:run`, which will start an embedded Jetty instance.\r\nVisit your new application on [http://127.0.0.1:8080/](http://127.0.0.1:8080/).\r\n\r\n\r\n\r\n[layouts-blog]: http://www.thymeleaf.org/doc/articles/layouts.html\r\n[sb-admin 2]: http://startbootstrap.com/template-overviews/sb-admin-2/\r\n[Thymeleaf 3 announcement]: http://forum.thymeleaf.org/Thymeleaf-3-0-is-here-td4029676.html\r\n[Spring Framework]: http://projects.spring.io/spring-framework/\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}